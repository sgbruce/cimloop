l{{include_text('defines.yaml')}}

architecture:
  nodes: &macro # TOP MACRO
  # ===========================================================================
  - !Container # Macro top-level
    name: macro
    <<<: [*container_defaults]

  - !Component # DRAM main memory
    name: DRAM
    <<<: [*component_defaults]
    subclass: DRAM
    attributes:
      type: "LPDDR4"
      width: 64
      depth: INF
  
  # - !Component
  #   name: global_pe
  #   <<<: [*component_defaults]
  #   subclass: global_pe
  #   attributes: 
  #     width: 264
  #     depth: 4096
      
  - !Container # accelerator
    name: vsqutie
    spatial: {meshX: 4, meshY: 4}
    max_utilization: {spatial: {factors: [('R=' + str(vsqutie.get_fanout()))]}}

  - !Hierarchical
    nodes:
    - !Component
      name: output_buffer
      <<<: [*component_defaults, *keep_outputs]
      subclass: SRAM
      attributes:
        depth: 512
        width: 136
        n_rdwr_ports: 1
      constraints:
        temporal:
          permutation: [X, P, S, R]
          factors: [N=1]
          
        
    - !Component
      name: PPU
      <<<: [*component_defaults, *keep_outputs]
      subclass: PPU
      energy_scale: 1/16 # would prefer to parameterize on banks(1/banks), but number is static 16
      attributes:
        width: 40
        depth: INF
      constraints:
        temporal:
          permutation: [X,P, S, R]
          factors: [N=1]


  - !Component # Each PE in the column receives a different filter row
    name: accumulator
    <<<: [*component_defaults, *keep_outputs]
    subclass: aladdin_register
    attributes:
        width: 384
        depth: 16
        datawidth: 24
        n_rdwr_ports: 2
        n_banks: 1
    constraints:
      temporal:
        permutation: [X, P, S, R]
        factors: [N=1, C=1, M=1]
        
  - !Component
    name: B_Buffer
    <<<: [*component_defaults, *keep_inputs]
    subclass: B_Buffer
    attributes:
      width: 264
      depth: 2048
      n_rw_ports: 2
    constraints:
      temporal:
        permutation: [X,P,S, R]
        factors: [N=1, C=1]

  - !Container # vector lane w/ buffer
    name: vec_mac_lane
    spatial: {meshX: 16}
    constraints:
      spatial:
        factors: [N=1, C=1, M=1, S=16, P=1, Q=1, R=16]
    max_utilization: {spatial: {factors: [('R=' + str(vec_mac_lane.get_fanout()))]}}

  - !Component 
    name: A_Buffer
    <<<: [*component_defaults, *keep_weights]
    subclass: A_Buffer
    attributes:
      width: 264
      depth: 128
    constraints:
      temporal:
        permutation: [X,P, S, R]
        factors: [N=1, M=1]
      
  - !Component
    name: mac_weight_register
    <<<: [*component_defaults, *keep_weights]
    subclass: aladdin_register
    attributes:
      # datawidth: 4
      width: 264
      depth: 1
    # constraints:
    #   temporal:
    #     permutation: [X,R,S]
      
  - !Component
    name: scale_factor_compute
    <<<: [*component_defaults, *no_temporal_reuse]
    subclass: aladdin_multiplier
    attributes:
      # datawidth: 8
      width: 8
      depth: INF

  - !Component
    name: scale_factor_mult
    <<<: [*component_defaults, *no_temporal_reuse]
    subclass: aladdin_multiplier
    attributes:
      # datawidth: 14
      width: 12
      depth: INF

  - !Component
    name: partial_sum_add
    <<<: [*component_defaults, *no_temporal_reuse]
    subclass: aladdin_adder
    attributes:
      # datawidth: 24
      depth: INF
      width: 24

    # TANNER:
  # - !Component # The "read" energy of this component is whatever input & weight postprocessing is necessary 
  #   name: input_weight_postprocessing
  #   <<<: [*component_defaults, *keep_inputs, *keep_weights, *no_coalesce]
  #   subclass: input_weight_postprocessing
  #   attributes:
  #     depth: INF
  #     width: ENCODED_INPUT_BITS + ENCODED_WEIGHT_BITS # If this is the width, then you'll get one read per (1 input + 1 weight) that passes through here
  #     # width: ENCODED_INPUT_BITS # If this is the width, then you'll get one read per (1 input) that passes through here
  #     # width: ENCODED_WEIGHT_BITS # If this is the width, then you'll get one read per (1 weight) that passes through here
  #   # You may also have 2 of these, one for outputs and one for weights 

  - !Hierarchical
    nodes: *virtualized_mac_without_mac_unit

  - !Component
    name: mac_op_4_bit
    class: mac
    subclass: mac_unit_csv
    attributes:
      width: INPUT_BITS
      depth: INF
    spatial: {meshX: NUM_VEC_MAC}
    constraints:
      spatial:
        factors: [S=64]
    max_utilization: {spatial: {factors: [('S=' + str(mac_op_4_bit.get_fanout()))]}}


