{{include_text('defines.yaml')}}

architecture:
  nodes: &macro # TOP MACRO
  # ===========================================================================
  - !Container # Macro top-level
    name: macro
    <<<: [*container_defaults]

  - !Component # DRAM main memory
    name: DRAM
    <<<: [*component_defaults, *keep_inputs, *keep_outputs, *keep_weights]
    subclass: DRAM
    attributes:
      type: "LPDDR4"
      width: 64
      depth: INF
      
  - !Component # Global buffer for inputs & outputs
    name: shared_glb
    <<<: [*component_defaults]
    subclass: smartbuffer_sram
    attributes:
      depth: 16384
      width: 64
      read_bandwidth: 128 # bits/cycle
      write_bandwidth: 128 # bits/cycle

  - !Container # Eyeriss accelerator
    name: eyeriss

  # - !Component
  #     name: PPU
  #     subclass: PPU
  #     <<<: [*component_defaults, *keep_outputs]
  - !Component
    name: B_Buffer
    <<<: [*component_defaults, *keep_inputs]
    subclass: B_Buffer
    attributes:
      width: 264
      depth: 2048
      n_rw_ports: 2
      
  - !Component
      name: output_buffer
      <<<: [*component_defaults, *keep_outputs]
      class: SRAM
      attributes:
        depth: 512
        width: 136
        n_rdwr_ports: 1

  - !Container # Each column stores a different weight slice. Columns share inputs.
    name: PE_column
    <<<: [*container_defaults, *spatial_must_reuse_inputs]
    spatial: {meshX: 16}
    max_utilization: {spatial: {factors: [('M=' + str(PE_column.get_fanout()))]}}
    constraints:
      spatial:
        factors: [N=1, C=1, P=1, R=1, S=1]
        split: 999

  # - !Container # Each PE in the column receives a different filter row
  #   name: PE
  #   spatial: {meshY: 12}
  #   constraints:
  #     spatial:
  #       split: 0
  #       factors: [N=1, P=1, Q=1, R=1]
  #   max_utilization: {spatial: {factors: [('C=' + str(PE.get_fanout()))]}}

  # - !Component # Input scratchpad
  #   name: ifmap_spad
  #   subclass: smartbuffer_sram_components_dot_yaml
  #   <<<: [*component_defaults, *keep_inputs]
  #   attributes:
  #     depth: 12
  #     width: 16
  #     read_bandwidth: 16 # bits/cycle
  #     write_bandwidth: 16 # bits/cycle
  #   constraints:
  #     temporal:
  #       permutation: [N, M, C, P, Q, R, S]
  #       factors: [N=1, M=1, C=1, P=1, Q=1, R=1, S=1]

  - !Component 
    name: A_Buffer
    <<<: [*component_defaults, *keep_weights]
    subclass: A_Buffer
    attributes:
      width: 264
      depth: 128
    constraints:
      temporal:
        permutation: [N, M, P, Q, S, C, R]
        factors: [N=1, M=1, P=1, Q=1, S=1]

  - !Component
    name: register
    <<<: [*component_defaults, *keep_weights]
    class: reg_file_csv # for whatever reason, reg requires subclass
    attributes:
      width: 264
      depth: 1
      technology: TECHNOLOGY

      

  # - !Component # Output scratchpad
  #   name: psum_spad
  #   <<<: [*component_defaults, *keep_outputs]
  #   subclass: smartbuffer_sram
  #   attributes:
  #     depth: 16
  #     width: 16
  #     read_bandwidth: 16 # bits/cycle
  #     write_bandwidth: 16 # bits/cycle
  #     # If a scratchpad stores unquantized data and we're quantizing later, we may
  #     # need 2x the bits to store each value. Assume psums are not quantized until
  #     # after the psum scratchpad.
  #     datawidth: 2 if QUANTIZE else 1
  #   constraints:
  #     temporal:
  #       permutation: [N, C, P, Q, R, S, M] 
  #       factors: [N=1, C=1, R=1, S=1, P=1, Q=1]

  # - !Component
  #   name: scale_factor_compute
  #   <<<: [*component_defaults, *keep_inputs, *keep_weights]
  #   subclass: intmultiplier
  #   attributes:
  #     # technology: TECHNOLOGY
  #     datawidth: 8

  # - !Component
  #   name: scale_factor_mult
  #   <<<: [*component_defaults, *keep_inputs, *keep_weights]
  #   subclass: intmultiplier
  #   attributes:
  #     technology: TECHNOLOGY
  #     datawidth: 14
  
  # - !Component
  #   name: partial_sum_add
  #   <<<: [*component_defaults, *keep_outputs]
  #   # class: compute
  #   class: partial_sum
  #   attributes:
  #     technology: TECHNOLOGY
  #     datawidth: 8

  - !Component
    name: mac_op_4_bit
    class: mac_unit_csv
    attributes:
      technology: TECHNOLOGY
      datawidth: 4
    spatial: {meshX: 1}