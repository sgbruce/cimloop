l{{include_text('defines.yaml')}}

compound_components:
  version: 0.4         # REQUIRED version number
  classes:
  - name: smartbuffer_sram_components_dot_yaml
    attributes:
      technology: "must_specify"
      width: "must_specify"
      depth: "must_specify"
      n_rw_ports: 1
      global_cycle_seconds: "must_specify"
    subcomponents:
    - name: storage
      class: SRAM
      attributes:
        width: width
        depth: depth
        n_rw_ports: n_rw_ports
        technology: technology
        global_cycle_seconds: global_cycle_seconds   
    # We don't need to scale the address generators
    - name: address_generator
      class: aladdin_adder
      attributes:
        n_instances: 2 # One for read, one for write
        n_bits: max(1, ceil(log2(depth))) if depth >= 1 else 1
        precision: max(1, ceil(log2(depth))) if depth >= 1 else 1
        datawidth: max(1, ceil(log2(depth))) if depth >= 1 else 1
        global_cycle_seconds: global_cycle_seconds
    actions:
    - &write_action
      name: write 
      subcomponents:
      - name: storage
        actions: [{name: write}]
      - name: address_generator
        actions: [{name: add}]
    - name: read
      subcomponents:
      - name: storage
        actions: [{name: read}]
      - name: address_generator
        actions: [{name: add}]
    - name: leak
      subcomponents:
      - name: storage
        actions: [{name: leak}]
      - name: address_generator
        actions: [{name: leak}]
    - name: update
      << : *write_action # Update is the same as write
    
  - name: A_Buffer
    attributes:
      technology: "must_specify"
      global_cycle_seconds: "must_specify"
      width: "must_specify"
      depth: "must_specify"
      n_rw_ports: 2
      datawidth: 4
    subcomponents: 
    - name: storage
      class: SRAM
      attributes:
        width: width
        depth: depth
        n_rw_ports: 2
        technology: technology
        global_cycle_seconds: global_cycle_seconds
        datawidth: datawidth
    - name: address_generator
      class: aladdin_adder
      attributes:
        n_instances: 1
        n_bits: max(1, ceil(log2(depth))) if depth >= 1 else 1
        precision: max(1, ceil(log2(depth))) if depth >= 1 else 1
        datawidth: max(1, ceil(log2(depth))) if depth >= 1 else 1
        global_cycle_seconds: global_cycle_seconds
      energy_scale: 1/16 # would prefer to parameterize on banks(1/banks), but number is static 16
    actions:
    - name: read
      subcomponents:
      - name: storage
        actions:
        - name: read
      - name: address_generator
        actions:
        - name: add
    - &write_action
      name: write
      subcomponents:
      - name: storage
        actions:
        - name: write
      - name: address_generator
        actions:
        - name: add
    - name: leak
      subcomponents: 
      - name: storage
        actions: [{name: leak}]
      - name: address_generator
        actions: [{name: leak}]
    - name: update
      << : *write_action
    
  - name: B_Buffer
    attributes:
      technology: "must_specify"
      global_cycle_seconds: "must_specify"
      width: "must_specify"
      depth: "must_specify"
      n_rw_ports: 2
      datawidth: 4
    subcomponents: 
    - name: storage
      class: SRAM
      attributes:
        width: width
        depth: depth
        datawidth: datawidth
        n_rw_ports: n_rw_ports
        technology: technology
        global_cycle_seconds: global_cycle_seconds
    - name: address_generator
      class: aladdin_adder
      attributes:
        n_instances: 1
        n_bits: max(1, ceil(log2(depth))) if depth >= 1 else 1
        precision: max(1, ceil(log2(depth))) if depth >= 1 else 1
        datawidth: max(1, ceil(log2(depth))) if depth >= 1 else 1
        global_cycle_seconds: global_cycle_seconds
    actions:
    - &write_action
      name: write 
      subcomponents:
      - name: storage
        actions: [{name: write}]
      - name: address_generator
        actions: [{name: add}]
    - name: read
      subcomponents:
      - name: storage
        actions: [{name: read}]
      - name: address_generator
        actions: [{name: add}]
    - name: leak
      subcomponents:
      - name: storage
        actions: [{name: leak}]
      - name: address_generator
        actions: [{name: leak}]
    - name: update
      << : *write_action # Update is the same as write
  
  - name: PPU
    attributes: 
      technology: "must_specify"
      global_cycle_seconds: "must_specify"
      width: "must_specify"
    subcomponents: 
    - name: matrix_scaling[1..16]
      <<<: [*component_defaults]
      class: aladdin_multiplier
      attributes: 
        technology: technology
        width: width
        depth: INF
    - name: bias_addition[1..16]
      <<<: [*component_defaults]
      class: aladdin_adder
      attributes:
        technology: technology
        width: width
        depth: INF
    - name: relu[1..16]
      <<<: [*component_defaults]
      class: comparator
      attributes:
        technology: technology
        width: width
        depth: INF
    - name: truncation_vec_max[1..16]
      <<<: [*component_defaults]
      class: bitwise
      attributes:
        technology: technology
        width: width
        depth: INF
    - name: quantize_and_round[1..16]
      <<<: [*component_defaults]
      class: bitwise
      attributes:
        technology: technology
        width: width
        depth: INF
    - name: approx_softmax[1..16]
      <<<: [*component_defaults]
      class: aladdin_multiplier
      attributes:
        technology: technology
        width: width
        depth: INF
    - name: scale_buffer
      <<<: [*component_defaults]
      class: aladdin_register
      attributes: 
        technology: technology
        width: 256
        depth: 8
    - name: bias_buffer
      <<<: [*component_defaults]
      class: aladdin_register
      attributes: 
        technology: technology
        width: 128
        depth: 8
    - name: vsq_buffer
      <<<: [*component_defaults]
      class: aladdin_register
      attributes: 
        technology: technology
        width: 296
        depth: 16
    actions: 
    - &compute_action
      name: compute
      subcomponents: 
      - name: matrix_scaling[1..16]
        actions: [{name: mult_random}]
      - name: bias_addition[1..16]
        actions: [{name: add}]
      - name: relu[1..16]
        actions: [{name: compare}]
      - name: truncation_vec_max[1..16]
        actions: [{name: process}]
      - name: quantize_and_round[1..16]
        actions: [{name: process}]
      - name: approx_softmax[1..16]
        actions: [{name: mult_random}]
      - name: scale_buffer
        actions: [{name: read}]
      - name: bias_buffer
        actions: [{name: read}]
      - name: vsq_buffer
        actions: [{name: read}, {name: write}]
    - &write_buffer_action
      name: write_buffer
      subcomponents: 
      - name: scale_buffer
        actions: [{name: write}]
      - name: bias_buffer
        actions: [{name: write}]
    - name: read
      << : *compute_action
    - name: write
      << : *write_buffer_action
    - name: update
      << : *compute_action
    - name: leak
      subcomponents: 
      - name: matrix_scaling[1..16]
        actions: [{name: leak}]
      - name: bias_addition[1..16]
        actions: [{name: leak}]
      - name: relu[1..16]
        actions: [{name: leak}]
      - name: truncation_vec_max[1..16]
        actions: [{name: leak}]
      - name: quantize_and_round[1..16]
        actions: [{name: leak}]
      - name: approx_softmax[1..16]
        actions: [{name: leak}]
      - name: scale_buffer
        actions: [{name: leak}]
      - name: bias_buffer
        actions: [{name: leak}]
      - name: vsq_buffer
        actions: [{name: leak}]

  - name: global_pe
    attributes:
      width: "must_specify"
      depth: "must_specify"
      technology: "must_specify"
      global_cycle_seconds: "must_specify"
      datawidth: 4
    subcomponents:
    - name: address_generator
      <<<: [*component_defaults]
      subclass: aladdin_adder
      attributes:
        n_instances: 1
        n_bits: max(1, ceil(log2(depth))) if depth >= 1 else 1
        precision: max(1, ceil(log2(depth))) if depth >= 1 else 1
        datawidth: max(1, ceil(log2(depth))) if depth >= 1 else 1
        global_cycle_seconds: global_cycle_seconds
    - name: scratchpad
      class: SRAM
      attributes: 
        width: width
        depth: depth
        technology: technology
        global_cycle_seconds: global_cycle_seconds
        datawidth: datawidth
    actions:
    - name: read
      subcomponents:
      - name: address_generator
        actions: [{name: add}]
      - name: scratchpad
        actions: [{name: read}]
    - &write_action
      name: write
      subcomponents:
      - name: address_generator
        actions: [{name: add}]
      - name: scratchpad
        actions: [{name: write}]
    - name: update
      << : *write_action # Update is the same as write
    - name: leak
      subcomponents:
      - name: address_generator
        actions: [{name: leak}]
      - name: scratchpad
        actions: [{name: leak}]
      

          